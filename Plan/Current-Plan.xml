<plan>
  <Goal>Restore KickDrum Windows builds by ensuring sandbox helper fallbacks resolve when the WDL helper objects are absent.</Goal>

  <Environment-Check>
    Running inside an Ubuntu 22.04 container without MSVC or the Windows SDK, so Windows-specific binaries cannot be linked here.
  </Environment-Check>
  <PHASE>PLAN-EXECUTION</PHASE>
  <Build-Test-Compatible>FALSE</Build-Test-Compatible>
  <context>
    KickDrum defines the sandbox WDL helper macros but does not compile the helper translation units, so MSVC reports unresolved
    WDL sandbox exports. The fallback now emits C-linkage bridge functions with explicit alternatename directives so missing WDL
    helpers resolve to the legacy implementations even when the helper objects are omitted.
  </context>

  <Tasks>

    <task>
      <name>Confirm linker failures stem from stripped fallback exports</name>
      <status>SUCCESS</status>
      <tryCount>1</tryCount>
      <crucialInfo>
        Verified that the unresolved symbols match the optional WDL helper entry points and that the fallback shims rely on
        MSVC alternatename directives, making them susceptible to /OPT:REF when the anchor functions are not explicitly included.
      </crucialInfo>
      <continue-info>
        No further investigation required; the fix must ensure the anchor functions are linked whenever the header is used.
      </continue-info>
      <subtasks>
      </subtasks>
    </task>

    <task>
      <name>Provide MSVC alternatenames for the fallback bridge wrappers</name>
      <status>SUCCESS</status>
      <tryCount>2</tryCount>
      <crucialInfo>
        Replaced the __FUNCDNAME__-driven helpers with explicit C-linkage bridge wrappers and alternatename directives so MSVC
        always redirects unresolved WDL helper references to the legacy fallbacks while keeping compatibility with projects that
        compile the real helper sources.
      </crucialInfo>
      <continue-info>
        Await confirmation from a Windows build that the KickDrum executable now links without the WDL helper objects.
      </continue-info>
      <subtasks>
      </subtasks>
    </task>

  </Tasks>

  <Finalization>
    <task>
      <name>FINAL CHECK</name>
      <status>OPEN</status>
      <tryCount>0</tryCount>
      <crucialInfo>
        Action: Mark all tasks as AWAITS REVIEW. Mark this task as FINAL-REVIEW-STARTED. Review all tasks with build tests if Build-Test-Compatible = TRUE; otherwise perform a code-only perspective review. If a task fails review, reopen that task (and its subtasks) and work until it returns to AWAITS REVIEW. Loop until all tasks are REVIEW PASSED. If all tasks are REVIEW PASSED, set this task to SUCCESS: Plan successfully finished — Goal Achieved — Create Final Pull Request based on the whole Plan.
      </crucialInfo>
    </task>
  </Finalization>

</plan>
