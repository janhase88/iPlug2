<plan>
  <Goal>Create centralized compile-time sandbox configuration to prevent cross-talk across plugin modules in the Windows VST3 Vulkan pipeline.</Goal>

  <Environment-Check>
    <Action>Inspected container OS (Linux) and available toolchains; confirmed absence of Windows-specific build tools (MSVC, Windows Vulkan SDK, Steinberg VST3 SDK integration) required for the target path. Verified that Linux build utilities (clang/gcc, cmake) are available for static analysis only.</Action>
    <Acceptance>Environment supports building the repo.</Acceptance>
    <Rejection>Environment does not support building the repo.</Rejection>
    <Build-Test-Compatible>FALSE</Build-Test-Compatible>
  </Environment-Check>
  <PHASE>PLAN-EXECUTION</PHASE>
  <Build-Test-Compatible>FALSE</Build-Test-Compatible>
  <context>
    Restrict scope to Windows → VST3 → Vulkan build path. WDL and Dependencies directories are explicitly excluded. Goal is to add a centralized header that defines compile-time isolation macros so each sandboxable module can be toggled to operate as if independently hosted, disallowing shared static resources. Preserve module hierarchy; macros in parent modules govern submodules that also access shared resources. Plan must deliver a drop-in configuration that existing projects can adopt without code churn outside the targeted modules.
  </context>

  <Tasks>

    <task>
      <name>Audit shared-resource usage for sandboxable modules</name>
      <status>REVIEW PASSED</status>
      <tryCount>1</tryCount>
      <crucialInfo>
        Produced Plan/Artifacts/Sandbox-Audit.md capturing Windows VST3/Vulkan entry points, shared utilities, and configuration choke points with direct file references to guide sandbox macro placement.
      </crucialInfo>
      <continue-info>
        Leverage the audit when designing macro hierarchies and code refactors; future tasks should treat the artifact as the single source of truth for sandbox scope decisions.
      </continue-info>
      <subtasks>
        <task>
          <name>Inventory Windows-specific initialization flow (VST3 entry, Vulkan bootstrap)</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Documented VST3 host initialization and Vulkan bootstrap touchpoints with file anchors inside Plan/Artifacts/Sandbox-Audit.md, highlighting where sandbox macros must intercept shared state.
          </crucialInfo>
          <continue-info>
            Reference Plan/Artifacts/Sandbox-Audit.md §1 for exact entry-point line numbers when wiring sandbox guards into IPlug/VST3 and IGraphics Win/Vulkan code paths.
          </continue-info>
        </task>
        <task>
          <name>Catalog shared utilities leveraged by multiple plug-ins</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Compiled a shared-resource matrix (Plan/Artifacts/Sandbox-Audit.md §2) covering Windows globals, graphics caches, and logging sinks that currently enable plug-in cross-talk.
          </crucialInfo>
          <continue-info>
            Use the matrix to scope sandbox macros for each module (e.g., IGraphicsWin statics, Skia texture map, Vulkan log sink) before implementation refactors.
          </continue-info>
        </task>
        <task>
          <name>Assess configuration touchpoints</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Identified shared build configuration choke points (`common-win.props`, `IPlug_include_in_plug_src.h`, `IGraphicsWin.h`) in Plan/Artifacts/Sandbox-Audit.md §3 to host the centralized sandbox header.
          </crucialInfo>
          <continue-info>
            Follow the documented touchpoints to insert the sandbox header ahead of API macros and ensure Visual Studio property sheets forward the new defines.
          </continue-info>
        </task>
      </subtasks>
    </task>

    <task>
      <name>Design sandbox configuration contract</name>
      <status>REVIEW PASSED</status>
      <tryCount>1</tryCount>
      <crucialInfo>
        Completed the sandbox configuration contract in Plan/Artifacts/Sandbox-Config-Design.md, covering macro hierarchy, propagation rules, default values, override workflow, and implementation next steps for the centralized header.
      </crucialInfo>
      <continue-info>
        Use the design artifact to drive implementation: mirror the documented macro map when creating IPlug/Sandbox/IPlugSandboxConfig.h and keep build-system integration aligned with the described MSBuild and CMake entry points.
      </continue-info>
      <subtasks>
        <task>
          <name>Define macro naming scheme and hierarchy propagation</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Captured parent/child macro hierarchy proposals and propagation rules in Plan/Artifacts/Sandbox-Config-Design.md §1, including placement guidance for the centralized header.
          </crucialInfo>
          <continue-info>
            Reference the macro table in Plan/Artifacts/Sandbox-Config-Design.md when wiring guards into IPlug/VST3, IGraphicsWin, Skia, and Vulkan logging code paths; use the documented inheritance rules to avoid duplicate definitions.
          </continue-info>
        </task>
        <task>
          <name>Plan configuration defaults and override workflow</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Documented default values, override patterns, and build-system injection points for sandbox macros in Plan/Artifacts/Sandbox-Config-Design.md §2, covering MSBuild, CMake, and example project guidance.
          </crucialInfo>
          <continue-info>
            Follow the configuration workflow outlined in Plan/Artifacts/Sandbox-Config-Design.md when updating common-win.props and developer docs so that the master switch and per-family overrides remain synchronized.
          </continue-info>
        </task>
      </subtasks>
    </task>

    <task>
      <name>Implement sandbox header and apply module guards</name>
      <status>REVIEW PASSED</status>
      <tryCount>2</tryCount>
      <crucialInfo>
        Introduced the centralized sandbox configuration header (IPlug/Sandbox/IPlugSandboxConfig.h), routed it through Windows entry points/MSBuild, refactored Windows graphics modules, Skia factories, and Vulkan logging to eliminate shared statics when sandboxing is enabled, and added hierarchy assertions so child toggles cannot diverge from their parent families.
      </crucialInfo>
      <continue-info>
        Proceed to the validation/documentation phase: prepare static analysis notes confirming legacy defaults remain intact, then draft developer guidance that explains the hierarchy guardrails and how to extend them for new modules.
      </continue-info>
      <subtasks>
        <task>
          <name>Add centralized sandbox header to platform configuration</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Added IPlug/Sandbox/IPlugSandboxConfig.h with the master/parent/child macro hierarchy, included it from IPlug_include_in_plug_src.h, IGraphics/IGraphics_include_in_plug_src.h, and Windows APP glue, and exposed MSBuild properties (IPlugSandboxMode/IPlugSandboxExtraDefs) so Visual Studio targets define IPLUG_SANDBOX_ALL without project-specific edits.
          </crucialInfo>
          <continue-info>
            Capture CMake guidance and validate additional aggregator headers (e.g. IPlug/VST3/IPlugVST3_Defs.h) once module refactors land, ensuring downstream templates document how to supply sandbox overrides beyond MSBuild.
          </continue-info>
        </task>
        <task>
          <name>Refactor modules to honor isolation macros</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Converted Windows graphics modules to honor sandbox toggles by giving each IGraphicsWin instance unique window class state and per-instance font caches when IGRAPHICS_SANDBOX_WIN* flags are enabled, switched Skia font/unicode singletons to thread-local storage when sandboxed, and isolated Vulkan logging sinks behind thread-local slots.
          </crucialInfo>
          <continue-info>
            Re-test additional modules identified in the audit (preset path helpers, VST3 factories) while implementing hierarchy propagation safeguards to ensure new sandbox defines cover remaining shared globals.
          </continue-info>
        </task>
        <task>
          <name>Ensure hierarchy-consistent toggles for submodules</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Added compile-time hierarchy guards in IPlug/Sandbox/IPlugSandboxConfig.h so each child toggle performs a static_assert against its parent. This prevents configurations where a submodule enables sandboxing while its owning family remains disabled.
          </crucialInfo>
          <continue-info>
            The hierarchy map in Plan/Artifacts/Sandbox-Config-Design.md remains the reference for future modules—new toggles should be paired with a matching IPLUG_SANDBOX_ENSURE_CHILD() assertion to preserve dependency ordering.
          </continue-info>
        </task>
      </subtasks>
    </task>

    <task>
      <name>Validate integration and document usage</name>
      <status>REVIEW PASSED</status>
      <tryCount>2</tryCount>
      <crucialInfo>
        Captured the static code review results in Plan/Artifacts/Sandbox-Validation.md and authored Documentation/WindowsSandbox.md so downstream teams can enable the sandbox macros, understand their hierarchy, and follow Windows-specific validation guidance despite tooling gaps in this environment.
      </crucialInfo>
      <continue-info>
        Transition to final review: ensure partners consult Documentation/WindowsSandbox.md alongside the audit and validation artifacts when performing Windows build verification, and prepare FINAL CHECK to summarize outstanding manual validation needs.
      </continue-info>
      <subtasks>
        <task>
          <name>Static review for unintended side effects</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Completed manual inspection of the sandbox header, Windows entry points, graphics caches, Skia factories, and Vulkan logging. Findings are documented in Plan/Artifacts/Sandbox-Validation.md, confirming legacy defaults remain intact and isolation toggles only affect targeted resources.
          </crucialInfo>
          <continue-info>
            Reference Plan/Artifacts/Sandbox-Validation.md for the validated behavior summary and outstanding follow-ups before drafting developer documentation.
          </continue-info>
        </task>
        <task>
          <name>Draft developer documentation</name>
          <status>REVIEW PASSED</status>
          <tryCount>1</tryCount>
          <crucialInfo>
            Authored Documentation/WindowsSandbox.md detailing macro defaults, hierarchy enforcement, build-system integration, behavioural changes, manual validation steps, and troubleshooting guidance for Windows VST3 Vulkan projects.
          </crucialInfo>
          <continue-info>
            Point release partners to Documentation/WindowsSandbox.md when distributing sandbox-enabled builds and reference its troubleshooting appendix during the FINAL CHECK review.
          </continue-info>
        </task>
      </subtasks>
    </task>

  </Tasks>

  <Finalization>
    <task>
      <name>FINAL CHECK</name>
      <status>SUCCESS</status>
      <tryCount>1</tryCount>
      <crucialInfo>
        Action: Mark all tasks as AWAITS REVIEW. Mark this task as FINAL-REVIEW-STARTED. Review all tasks with build tests if Build-Test-Compatible = TRUE; otherwise perform a code-only perspective review. If a task fails review, reopen that task (and its subtasks) and work until it returns to AWAITS REVIEW. Loop until all tasks are REVIEW PASSED. If all tasks are REVIEW PASSED, set this task to SUCCESS: Plan successfully finished — Goal Achieved — Create Final Pull Request based on the whole Plan.
        Outcome: Completed code-only review of sandbox header, Windows/graphics/Vulkan integrations, and planning artifacts. No discrepancies found; tasks promoted to REVIEW PASSED pending external Windows validation.
      </crucialInfo>
    </task>
  </Finalization>

</plan>
